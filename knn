from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import time


from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn import metrics

from sklearn.model_selection import cross_val_score

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

accuracy_scores = []
precision_scores = []
recall_scores = []
f1_scores = []
socres=[]



df=pd.read_csv(r'C:\Users\M0844013\Desktop\UCI Machine Learning Repository\Diabetic Retinopathy Debrecen Data Set\messidor_features (Normalization).csv')


qty = df.iloc[:,0].count()
tn = int(round(qty * 0.8))
print(tn)   
    
X = df.iloc[:tn, [0]] # Will give you columns 2 and 3 i.e 'petal_length' and 'petal_width'
y = df.iloc[:tn, 1] # Label column i.e 'species'

#X= df.values[0:,1:]
#y= df.values[0:,0]



X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2,random_state=87)


clf=KNeighborsClassifier(n_neighbors=1,p=2,weights='distance',algorithm='brute')
clf.fit(X_train,y_train.astype('int'))


clf.predict(X_test)
clf.score(X_test,y_test.astype('int'))
clf.score(X_train,y_train.astype('int'))

y_pred = clf.predict(X_test)
accuracy_scores.append(accuracy_score(y_test.astype('int'), y_pred))
precision_scores.append(precision_score(y_test.astype('int'), y_pred,average='macro'))
recall_scores.append(recall_score(y_test.astype('int'), y_pred,average='macro'))
f1_scores.append(f1_score(y_test.astype('int'), y_pred,average='macro'))


len(X_train)
for k in range(1, 100):
    knn = KNeighborsClassifier(n_neighbors=k) 
knn.fit(X_train.astype('int'), y_train.astype('int'))                 
y_pred = knn.predict(X_test)              
accuracy_scores.append(metrics.accuracy_score(y_test.astype('int'), y_pred.astype('int'))) 



print('Accuracy', np.mean(accuracy_scores))
print('Precision', np.mean(precision_scores))
print('Recall', np.mean(recall_scores))
print('F1-measure', np.mean(f1_scores))


